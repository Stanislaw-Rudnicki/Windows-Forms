// Предположим, что существует прямоугольник,
// границы которого на 10 пикселей отстоят от границ клиентской области окна.
// Необходимо при нажатии левой кнопки мыши выводить в заголовок окна сообщение о том,
// где произошел щелчок мышью: внутри прямоугольника, снаружи или на границе прямоугольника.
// При нажатии правой кнопки мыши необходимо выводить в заголовок окна информацию о размере клиентской области окна
// (ширина и высота клиентской области окна).

#include <Windows.h>
#include <tchar.h>

LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM); //прототип оконной процедуры
TCHAR szClassWindow[] = TEXT("Каркасное приложение");

/*Имя класса окна*/
INT WINAPI _tWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPTSTR lpszCmdLine, int nCmdShow)
{
	HWND hWnd;
	MSG Msg;
	WNDCLASSEX wcl;

	/* 1. Определение класса окна */
	wcl.cbSize = sizeof(wcl); // размер структуры WNDCLASSEX
	wcl.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; // окно сможет получать сообщения о двойном щелчке (DBLCLK)
	wcl.lpfnWndProc = WindowProc; // адрес оконной процедуры
	wcl.cbClsExtra = 0; // используется Windows
	wcl.cbWndExtra = 0; // используется Windows
	wcl.hInstance = hInst; // дескриптор данного приложения
	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION); // загрузка стандартной иконки
	wcl.hCursor = LoadCursor(NULL, IDC_ARROW); // загрузка стандартного курсора
	wcl.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // заполнение окна белым цветом
	wcl.lpszMenuName = NULL; // приложение не содержит меню
	wcl.lpszClassName = szClassWindow; // имя класса окна
	wcl.hIconSm = NULL; // отсутствие маленькой иконки

	/* 2. Регистрация класса окна */
	if (!RegisterClassEx(&wcl)) return 0; // при неудачной регистрации - выход

	/* 3. Создание окна */
	// создается окно и переменной hWnd присваивается дескриптор окна
	hWnd = CreateWindowEx(
		0, // расширенный стиль окна
		szClassWindow, // имя класса окна
		TEXT("Каркас Windows приложения"), //заголовок окна
		/* Заголовок, рамка, позволяющая менять размеры, системное меню, кнопки развёртывания и свёртывания окна*/
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, // х-координата левого верхнего угла окна
		CW_USEDEFAULT, // y-координата левого верхнего угла окна
		CW_USEDEFAULT, // ширина окна
		CW_USEDEFAULT, // высота окна
		NULL, // дескриптор родительского окна
		NULL, // дескриптор меню окна
		hInst, // идентификатор приложения, создавшего окно
		NULL); // указатель на область данных приложения

	/* 4. Отображение окна */
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd); // перерисовка окна

	/* 5. Запуск цикла обработки сообщений */
	// получение очередного сообщения из очереди сообщений
	while (GetMessage(&Msg, NULL, 0, 0))
	{
		TranslateMessage(&Msg);// трансляция сообщения
		DispatchMessage(&Msg); // диспетчеризация сообщений
	}
	return Msg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
	TCHAR str[50];
	HDC hdc; //создаём контекст устройства
	PAINTSTRUCT ps; //создаём экземпляр структуры графического вывода
	RECT ClientRect;
	GetClientRect(hWnd, &ClientRect);
	HBRUSH hBrush = CreateSolidBrush(RGB(240, 240, 240));
	switch (uMessage)
	{
	case WM_LBUTTONUP:
		if ((LOWORD(lParam) > 10 && HIWORD(lParam) > 10) && (LOWORD(lParam) < ClientRect.right - 10 && HIWORD(lParam) < ClientRect.bottom - 10))
			wsprintf(str, TEXT("Щелчок мышью произошел внутри прямоугольника"));
		else if ((LOWORD(lParam) < 10 || LOWORD(lParam) > ClientRect.right - 10 && LOWORD(lParam) < ClientRect.right) ||
				((HIWORD(lParam) < 10 || HIWORD(lParam) > ClientRect.bottom - 10 && HIWORD(lParam) < ClientRect.bottom)))
			wsprintf(str, TEXT("Щелчок мышью произошел снаружи прямоугольника"));
		else
			wsprintf(str, TEXT("Щелчок мышью произошел на границе прямоугольника"));
		SetWindowText(hWnd, str); // строка выводится в заголовок окна
		break;
	case WM_RBUTTONUP:
		wsprintf(str, TEXT("Размер клиентской области окна: %d х %d"), ClientRect.right, ClientRect.bottom);
		SetWindowText(hWnd, str); // строка выводится в заголовок окна
		break;
		//сообщение рисования
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		//рисуем серый прямоугольник
		SelectObject(hdc, hBrush);
		Rectangle(hdc, 10, 10, ClientRect.right - 10, ClientRect.bottom - 10);

		ValidateRect(hWnd, NULL);
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY: // сообщение о завершении программы
		PostQuitMessage(0); // посылка сообщения WM_QUIT
		DeleteObject(hBrush);
		break;
	default:
		// все сообщения, которые не обрабатываются в данной оконной функции направляются обратно Windows на обработку по умолчанию
		return DefWindowProc(hWnd, uMessage, wParam, lParam);
	}
	return 0;
}